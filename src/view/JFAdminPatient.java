/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import helper.LoginHelper;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import object.InPatient;

/**
 *
 * @author dhadotid
 */
public class JFAdminPatient extends javax.swing.JFrame {

    InPatient inPatient;
    DefaultTableModel tableModel;
    String datenow = new SimpleDateFormat("yyyy-MM-dd").format(Calendar.getInstance().getTime());
    ButtonGroup bg = new ButtonGroup();
    /**
     * Creates new form JFAdminPatient
     */
    public JFAdminPatient() {
        super("Patient");
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        setResizable(false);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        txtPatientName.requestFocus();
        
        try
        {
         Registry myRegistry = LocateRegistry.getRegistry("127.0.0.1",1097);
         inPatient = (InPatient) myRegistry.lookup("objpatient");
        } 
        catch (Exception e) 
        {
            JOptionPane.showMessageDialog(null,"Error 1 :"+ e);
        }
        
        if(!LoginHelper.isAdmin.equals("1")){
            btnUpdate.setVisible(false);
            btnDelete.setVisible(false);
        }else{
            btnUpdate.setVisible(true);
            btnDelete.setVisible(true);
        }
        autoid();
        tableload();
        bg.add(rbMale);
        bg.add(rbFemale);
        dcDOB.getDateEditor().setEnabled(false);
        txtIDP.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatient = new javax.swing.JTable();
        dcDOB = new com.toedter.calendar.JDateChooser();
        rbMale = new javax.swing.JRadioButton();
        btnUpdate = new javax.swing.JButton();
        rbFemale = new javax.swing.JRadioButton();
        btnDelete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        lblIDP = new javax.swing.JLabel();
        btnInsert = new javax.swing.JButton();
        lblPatientName = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblDOB = new javax.swing.JLabel();
        lblGender = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        lblAddress = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        txtIDP = new javax.swing.JTextField();
        txtPatientName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Pateient", "Patient Name", "Date of Brith", "Gender", "Address"
            }
        ));
        tblPatient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPatientMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPatient);

        rbMale.setFont(new java.awt.Font("Lucida Fax", 0, 18)); // NOI18N
        rbMale.setText("Male");

        btnUpdate.setFont(new java.awt.Font("Lucida Fax", 0, 18)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        rbFemale.setFont(new java.awt.Font("Lucida Fax", 0, 18)); // NOI18N
        rbFemale.setText("Female");

        btnDelete.setFont(new java.awt.Font("Lucida Fax", 0, 18)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Californian FB", 1, 36)); // NOI18N
        jLabel1.setText("Patient");

        txtAddress.setFont(new java.awt.Font("Lucida Fax", 0, 18)); // NOI18N

        lblIDP.setFont(new java.awt.Font("Lucida Fax", 0, 18)); // NOI18N
        lblIDP.setText("ID Patient");

        btnInsert.setFont(new java.awt.Font("Lucida Fax", 0, 18)); // NOI18N
        btnInsert.setText("Insert");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        lblPatientName.setFont(new java.awt.Font("Lucida Fax", 0, 18)); // NOI18N
        lblPatientName.setText("Patient Name ");

        jLabel2.setFont(new java.awt.Font("Lucida Fax", 0, 18)); // NOI18N
        jLabel2.setText("Search");

        lblDOB.setFont(new java.awt.Font("Lucida Fax", 0, 18)); // NOI18N
        lblDOB.setText("Date of Birth");

        lblGender.setFont(new java.awt.Font("Lucida Fax", 0, 18)); // NOI18N
        lblGender.setText("Gender");

        txtSearch.setFont(new java.awt.Font("Lucida Fax", 0, 18)); // NOI18N

        lblAddress.setFont(new java.awt.Font("Lucida Fax", 0, 18)); // NOI18N
        lblAddress.setText("Address");

        btnSearch.setFont(new java.awt.Font("Lucida Fax", 0, 18)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        txtIDP.setFont(new java.awt.Font("Lucida Fax", 0, 18)); // NOI18N

        txtPatientName.setFont(new java.awt.Font("Lucida Fax", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblIDP)
                                    .addComponent(lblDOB))
                                .addGap(284, 284, 284))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(151, 151, 151)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPatientName)
                                    .addComponent(lblGender)
                                    .addComponent(lblAddress))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnInsert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(rbMale)
                                        .addGap(32, 32, 32)
                                        .addComponent(rbFemale))
                                    .addComponent(txtPatientName, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                                    .addComponent(txtIDP)
                                    .addComponent(txtAddress)
                                    .addComponent(dcDOB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(txtSearch)
                                .addGap(18, 18, 18)
                                .addComponent(btnSearch))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIDP)
                    .addComponent(txtIDP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPatientName, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDOB)
                            .addComponent(dcDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(rbMale)
                                .addComponent(rbFemale))
                            .addComponent(lblGender))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAddress))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnUpdate))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        //Update
        String gender = "";
        String dob = new SimpleDateFormat("yyyy-MM-dd").format(dcDOB.getDate());
        //String dobcompare = new SimpleDateFormat("yyyy").format(dcDOB.getDate());
        if(rbFemale.isSelected()){
            gender = "Female";
        }else if(rbMale.isSelected()){
            gender = "Male";
        }
        try {
            
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure want to Update?" + txtPatientName.getText(), "Update", dialogButton);
                if(dialogResult == JOptionPane.YES_OPTION){
                    if (txtIDP.getText().equals("")) {
                        JOptionPane.showMessageDialog(null, "Please fill in Id Patient");
                    }else if(txtPatientName.getText().equals("")){
                        JOptionPane.showMessageDialog(null, "Please fill in Patient Name");
                        txtPatientName.requestFocus();
                    }else if(dob.equals("") || dob.compareTo(datenow) > 0){
                        JOptionPane.showMessageDialog(null, "Please fill in data DOB correctly");
                        dcDOB.requestFocus();
                        System.out.println("Input: " + dob);
                        System.out.println("Datenow: " + datenow);
                    }else if(txtAddress.getText().length() <= 4){
                        JOptionPane.showMessageDialog(null, "Please enter a valid address");
                        txtAddress.requestFocus();
                    }else if(rbFemale.isSelected() == false && rbMale.isSelected() == false){
                        JOptionPane.showMessageDialog(null, "Please select gender");
                    }else{
                        
                        inPatient.setPatientID(txtIDP.getText());
                        inPatient.setPatientName(txtPatientName.getText());
                        inPatient.setPatientDOB(dob);
                        inPatient.setPatientAddress(txtAddress.getText());
                        inPatient.setPatientGender(gender);
                        
                        int i = inPatient.doUpdate();
                        if(i != 0){
                            JOptionPane.showMessageDialog(null, "Data Patient successful updated");
                            tableload();
                            clearall();
                            autoid();
                        }else{
                            JOptionPane.showMessageDialog(null, "Data Patient failed updated");
                        }
                    }
                }
            
        } catch (Exception ex) {
            System.out.println("Error: " + ex);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        //Delete
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure want to Delete?" + txtPatientName.getText(), "Delete", dialogButton);
        if(dialogResult == JOptionPane.YES_OPTION){
            try {
                inPatient.setPatientID(txtIDP.getText());
                int res = inPatient.doDelete();
                if(res > 0){
                    JOptionPane.showMessageDialog(null, "Success delete data " + txtPatientName.getText());
                    tableload();
                    clearall();
                    autoid();
                }
            } catch (Exception e) {
                System.out.println("Error: " + e);
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        String dob = new SimpleDateFormat("yyyy-MM-dd").format(dcDOB.getDate());
        if (txtIDP.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please fill in Id Doctor");
        }else if(txtPatientName.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Please fill in Patient Name");
            txtPatientName.requestFocus();
        }else if(dob.equals("") || dob.compareTo(datenow) > 0){
            JOptionPane.showMessageDialog(null, "Please fill in data DOB correctly");
            //dcDOB.requestFocus();
            System.out.println("Input: " + dob);
            System.out.println("Datenow: " + datenow);
        }else if(txtAddress.getText().length() <= 4){
            JOptionPane.showMessageDialog(null, "Please enter a valid address");
            txtAddress.requestFocus();
        }else if(rbFemale.isSelected() == false && rbMale.isSelected() == false){
            JOptionPane.showMessageDialog(null, "Please select gender");
        }else{
            if (txtIDP.getText().equals("full")) {
                JOptionPane.showMessageDialog(null, "Data patient has been full");
            }else{
                String gender = "";
                if (rbMale.isSelected()) {
                    gender = "Male";
                }else if(rbFemale.isSelected()){
                    gender = "Female";
                }
                try {
                    
                    //System.out.println("DOB: " + dob);
                    inPatient.setPatientID(txtIDP.getText());
                    inPatient.setPatientName(txtPatientName.getText());
                    inPatient.setPatientDOB(dob);
                    inPatient.setPatientAddress(txtAddress.getText());
                    inPatient.setPatientGender(gender);
                    
                    int i = inPatient.doInsert();
                    if(i != 0){
                        JOptionPane.showMessageDialog(null, "Data patient successful inputted");

                        autoid();
                        clearall();
                        tableload();
                    }else{
                        JOptionPane.showMessageDialog(null, "Data patient failed inputted");
                    }
                } catch (Exception e) {
                    System.out.println("Error: " + e);
                }
            }
        }
    }//GEN-LAST:event_btnInsertActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        //Search Patient
        tableModel = (DefaultTableModel)tblPatient.getModel();
        tableModel.setRowCount(0);
        String[] columnNames = {"Id Patient", "Patient Name", "DOB", "Address", "Gender"};
        for(int i = 0; i < tblPatient.getColumnCount(); i++){
            TableColumn column1 = tblPatient.getTableHeader().getColumnModel().getColumn(i);
            column1.setHeaderValue(columnNames[i]);
        }
        try{
            ArrayList data = inPatient.getRecord(txtSearch.getText());
            for(int i = 0;i < data.size()-1;i+=5)
            {
                //fac_code, fac_name, fac_email, fac_phone
                String idPatient = (String)data.get(i);
                String patientName = (String)data.get(i+1);
                String DOB = (String)data.get(i+2);
                String patientAddress = (String)data.get(i+3);
                String patientGender = (String)data.get(i+4);
                
                String[] data_field = {idPatient.trim(), patientName.trim(),DOB.trim(), patientAddress.trim(), patientGender.trim()};
                tableModel.addRow(data_field);
            }
        }
        catch(Exception ex) {
            JOptionPane.showMessageDialog(null, "Data Gagal Ditampilkan" + ex.getMessage());
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void tblPatientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPatientMouseClicked
        //Mouse
        if(LoginHelper.isAdmin.equals("0")){
            
        }else if(LoginHelper.isAdmin.equals("1")){
            DefaultTableModel model = (DefaultTableModel)tblPatient.getModel();
            int selectedRowIndex = tblPatient.getSelectedRow();

            txtIDP.setText(model.getValueAt(selectedRowIndex, 0).toString());
            txtPatientName.setText(model.getValueAt(selectedRowIndex, 1).toString());
            txtAddress.setText(model.getValueAt(selectedRowIndex, 3).toString());

            String date1 = "";
            date1 = (model.getValueAt(selectedRowIndex, 2).toString());
            java.util.Date date;
            try {
                date = new SimpleDateFormat("yyyy-MM-dd").parse(date1);
                dcDOB.setDate(date);
            } catch (ParseException ex) {
                System.out.println("Error: " + ex);
            }

            String gender = (model.getValueAt(selectedRowIndex, 4).toString());

            if (gender.equals("Male")) {
                rbMale.setSelected(true);
            }else{
                rbFemale.setSelected(true);
            }

            btnInsert.setEnabled(false);
            btnDelete.setEnabled(true);
            btnUpdate.setEnabled(true);
        }
    }//GEN-LAST:event_tblPatientMouseClicked

    public void tableload(){
        tableModel = (DefaultTableModel)tblPatient.getModel();
        tableModel.setRowCount(0);
        String[] columnNames = {"Id Patient", "Patient Name", "DOB", "Address", "Gender"};
        for(int i = 0; i < tblPatient.getColumnCount(); i++){
            TableColumn column1 = tblPatient.getTableHeader().getColumnModel().getColumn(i);
            column1.setHeaderValue(columnNames[i]);
        }
        try{
            ArrayList data = inPatient.tablePatient();
            for(int i = 0;i < data.size()-1;i+=5)
            {
                //fac_code, fac_name, fac_email, fac_phone
                String idPatient = (String)data.get(i);
                String patientName = (String)data.get(i+1);
                String DOB = (String)data.get(i+2);
                String patientAddress = (String)data.get(i+3);
                String patientGender = (String)data.get(i+4);
                
                String[] data_field = {idPatient.trim(), patientName.trim(),DOB.trim(), patientAddress.trim(), patientGender.trim()};
                tableModel.addRow(data_field);
            }
        }
        catch(Exception ex) {
            JOptionPane.showMessageDialog(null, "Data Gagal Ditampilkan" + ex.getMessage());
        }
    }
    
    public void autoid(){
        try {
            txtIDP.setText(inPatient.autoid());
        } catch (Exception e) {
            System.out.println("Error: " + e);
        }
    }
    
    public void clearall(){
        txtPatientName.setText("");
        dcDOB.setDate(null);
        txtAddress.setText("");
        txtSearch.setText("");
        bg.clearSelection();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private com.toedter.calendar.JDateChooser dcDOB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblDOB;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblIDP;
    private javax.swing.JLabel lblPatientName;
    private javax.swing.JRadioButton rbFemale;
    private javax.swing.JRadioButton rbMale;
    private javax.swing.JTable tblPatient;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtIDP;
    private javax.swing.JTextField txtPatientName;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
